// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x58\xeb\x8e\xdb\xb8\x15\xfe\x2d\x3f\xc5\x89\x16\x0b\xd8\x3b\x96\x9c\x19\x34\x45\xa0\xb1\x5c\xa0\x41\x16\xc9\x22\xbb\x5b\x20\x83\xf6\x47\x51\x14\xb4\x78\x24\x33\xa6\x48\x95\xa4\xc6\xe3\x64\x53\xf4\x35\xfa\x7a\x7d\x92\xe2\x90\x92\xe5\x8b\x3c\x8b\x24\xc0\x8c\x44\x9e\xcb\x77\xbe\x73\x21\x35\xcb\x8d\xab\xe5\x6a\x02\xb0\xdc\x20\xe3\xab\x49\xb4\x74\xc2\x49\x5c\xbd\xff\xa4\xf9\x72\x11\x9e\x27\xd1\xb2\x46\xc7\xa0\xd8\x30\x63\xd1\xe5\x71\xeb\xca\xe4\x75\x0c\x0b\xd2\x03\x08\x9b\x8a\xd5\x98\xc7\x8f\x02\x77\x8d\x36\x2e\x86\x42\x2b\x87\xca\xe5\xf1\x4e\x70\xb7\xc9\x39\x3e\x8a\x02\x13\xff\x32\xaa\x69\xb0\x44\x63\xd0\x1c\x69\x2a\xad\xd0\xcb\x46\x4b\xeb\xf6\x1e\x08\x40\x96\x25\x3b\x5c\x6f\x85\x4b\x6c\x61\xb4\x94\x6b\x66\xe0\x0b\x78\xbb\x19\xbc\x6e\x9e\xee\xe1\xeb\x15\xb1\xc4\x19\x56\x6c\xe1\x0b\xac\x59\xb1\xad\x8c\x6e\x15\xcf\xc0\x54\x6b\x36\x7d\x39\xf7\xff\xd3\xdb\xd9\x73\xda\x9b\xb6\x5e\x3f\xa7\x7d\xf7\xca\xab\x93\x3e\x91\x3a\x87\xb5\xe6\x7b\xf8\x32\x89\x22\x80\x9a\x99\x4a\xa8\x0c\x5e\xde\xfb\xd7\x86\x71\x2e\x54\x75\x78\xef\xe0\xdf\xbe\x7c\xf9\xb8\x0b\x2b\x1b\x14\xd5\xc6\x85\xa5\x4d\x58\xe2\xc2\x36\x92\xed\x33\x28\x25\x3e\x85\x25\x7a\x4a\x4a\xa9\x77\x19\x14\x5a\xb6\xb5\xea\x96\xb5\x72\x49\xc9\x6a\x21\xf7\x19\xbc\xd1\xca\x6a\xc9\xec\x1c\xde\xb1\x62\x3b\x87\x9f\xb5\x62\x85\x9e\x43\xad\x95\xb6\x0d\x2b\xf0\xe8\xf1\x48\xdd\x8a\xcf\x98\xc1\xed\x5d\xd3\xb9\xaa\x85\x4a\x3a\x98\xaf\xba\x55\xe8\xa2\xad\x99\x50\x73\x60\x56\x70\xec\xc2\x6d\xb4\x15\x4e\x68\x95\x01\x5b\x5b\x2d\x5b\x87\x9d\x78\x04\xd0\x6b\x74\xa2\xc7\x74\xae\x25\x2b\xb6\x47\x91\x55\x86\x22\xbb\xbd\x60\xe4\xfb\x13\xd6\x0a\x26\x8b\x29\xad\x42\x02\x77\xaf\xfe\xd8\x3c\xcd\x2e\x10\xfb\xe5\x33\xc4\xb0\x82\x47\xc1\x51\x77\x38\x86\x14\x7c\x3f\xea\xaf\x57\x3d\x0e\xf3\x18\xfb\x6e\x23\x1c\xda\x5a\x6f\xf1\x04\x5c\xef\x79\x34\x80\xb5\x36\x1c\x4d\x22\xb1\xa4\xe5\xe6\x09\xac\x96\x82\x43\x65\xd8\xfe\x5b\x53\xce\xa4\xa8\x54\x62\x51\x96\x41\x38\x41\xc5\x4f\x39\x0f\xc0\x57\x40\x7d\x8e\xe6\x77\xea\x72\xc8\x7b\x87\x71\xad\x9d\xd3\xf5\x08\xca\x53\x5e\x06\xf3\x27\xe4\xb8\xd6\xfc\xab\xd5\xc2\x62\xd7\x5f\xa7\xc2\x19\x2b\x9d\x57\xe9\x3a\x3f\x83\xf8\x23\x4a\x2c\x1c\x30\xf8\x2b\xa5\xe8\xdf\xf1\xfd\xb5\x38\xb2\x8d\x7e\xbc\x70\x57\x68\xc3\xe4\x3d\x14\xad\xb1\xda\x64\xd0\x68\xa1\x1c\x9a\x71\xdf\x5e\x7f\x04\xc1\x8f\xda\x14\x08\x1f\xf7\xaa\x78\x11\xdf\x8f\xc6\x98\x4a\xcd\x88\xad\x91\x62\x18\xe2\xf5\x5b\x3d\x10\x8e\x25\x6b\xa5\x1b\xf2\x32\x6e\xb0\x47\x13\x74\x0f\x88\x3e\x84\xdd\x34\x4d\xe3\xf1\xcc\xb6\xf2\x3b\x29\xac\xeb\x14\xe9\x31\xf1\x73\x33\x03\x9a\xa4\x43\xf9\x1c\x5a\xea\x7c\x0c\x9d\x55\x03\x31\x43\x95\x96\xec\x33\x60\xad\xd3\x97\x42\xe7\xc9\xef\x11\xac\x40\x8a\x7e\x14\xf4\x3e\x5e\xf7\x15\xb5\xd3\x86\x27\x6b\x83\x6c\x9b\x81\xff\x95\x30\x29\x2f\x39\x39\xb6\xd5\x67\xf9\x82\xe8\x8a\x09\x65\xd7\xda\xe8\x53\xa2\xfb\x8c\x3f\x6b\x34\xb5\xbe\xc8\x90\x77\x76\xfd\xd8\xdb\x75\x4d\xba\xd6\xf2\x4a\xff\x7c\x27\xf5\x58\xca\x8f\x66\x57\xa1\x25\x81\xf0\x13\x61\x94\xd8\x91\x36\x1b\x9b\x65\x7f\x38\x8c\xb2\xc3\xe8\xb8\x3b\xb0\x78\x48\xce\xce\xb0\xa6\x27\x92\xa8\x7d\x2e\x77\x5d\x33\x3b\xdd\x8c\xcf\x9b\x2b\x53\xe4\xfc\x48\xb9\x72\x74\x9c\x57\x83\x67\xea\xa8\x14\x46\x2a\xf2\xaa\xca\xd5\x8c\xfb\x23\xf7\xee\xd5\xab\x39\x0c\x3f\xfc\xc9\x3d\x18\xbb\xec\xac\xf9\x51\x01\x0c\xcf\xa5\xd6\x43\x9f\xf5\x07\x7e\x6b\xd1\x24\xa1\x32\x3a\x94\xb0\xf8\x01\x3e\xb2\x92\x19\x01\x3f\x2c\x82\x6c\xad\x3f\x5f\x11\xfc\x51\x18\x2c\xf5\xd3\x20\x69\xaf\x08\xbe\x7f\x7b\xfb\xf2\x66\xf1\x96\x57\xd8\xcb\x5e\xf1\xec\x98\xe2\xcc\x70\x2f\xe5\xcb\x71\xb9\xe8\x6e\x43\x00\xcb\x45\xb8\xb5\x01\x2c\xe9\xb2\xe1\x6f\x6a\x4c\x28\x7f\x51\x5a\xbe\x48\x12\x3a\x88\x1d\x9a\x3c\xde\x38\xd7\xd8\x6c\xb1\xf8\x5c\x61\xda\xda\xd4\xe9\x85\xa8\xab\x05\xdb\xb1\x2d\xa6\x9f\x9a\x2a\x86\x24\x09\x4a\xe1\x48\x14\x9c\xae\x72\x1c\x75\xb8\x8d\x19\x2d\xed\x6a\x12\x45\xbf\x6e\x40\xe9\x17\xf0\xb0\x11\x16\xd6\x46\xef\x2c\x1a\xe0\x1a\xad\xfa\xdf\x7f\xfe\xeb\xc0\xb6\x0d\x5d\xfd\xe0\xdd\xc3\xcf\x1f\xc2\xd1\x9a\x7a\x93\x0b\xff\x4c\xd8\x16\x1d\xb8\xa5\xcf\x40\x70\xd8\x9d\x17\xe4\xd1\xee\x55\x11\xaf\x42\x4c\x68\xc2\x76\x2b\xfd\x16\x95\x0e\x6d\xb5\x72\x88\xad\x9b\x8c\xc8\x85\x63\x6b\x89\x79\xec\x4c\x8b\x43\x24\xbd\xa6\xae\x3a\xc5\x28\x22\x08\x9d\x6b\xc2\x15\x28\x03\x58\xda\xc2\x88\xc6\xad\x26\x51\xdc\x5a\x04\xeb\x8c\x28\x1c\xcd\xd8\x42\x2b\xeb\xba\x5b\x42\x0e\x5c\x17\x6d\x8d\xca\xa5\x15\xba\xb7\x12\xe9\xf1\xcf\xfb\xf7\x7c\xda\x31\x35\x3b\x28\xf8\x09\xf3\x8c\xbc\x0f\x66\x10\xef\x18\x78\x46\xc1\x13\x73\x64\x5f\x57\xcf\x9a\xd7\x15\x09\xf7\xd2\x56\x17\x5b\x24\x3c\x0a\x77\xf0\x37\x5c\x7f\xf4\xef\xd3\x49\x14\xc5\x3b\x2a\x89\x18\x6e\x40\xea\x82\xd1\x7d\x2d\xdd\x68\xeb\xe8\x3e\x0e\x37\x10\x67\x27\x3b\x3e\xb5\x37\x10\x2f\x82\xbd\x78\x12\x79\x1f\x8f\xcc\x40\x2b\x38\xe4\x90\xdc\xce\xa1\x24\xa4\x90\x43\xc9\xa4\x3f\xfb\x26\x51\xd9\xaa\x82\xf4\xc1\xa2\xe2\x53\x32\x3d\x07\xce\x1c\x9b\xf9\xb6\x0b\xb6\x52\xbf\xf7\xd3\xc7\x5f\x7f\x49\x89\x7b\x55\x89\x72\x3f\xa5\xed\x28\x26\x85\x38\xf3\x9f\x08\x73\xbf\x40\xba\x71\xe6\x4d\x4c\xa2\xe8\xeb\x8c\x58\xa1\xae\x3f\xf8\x91\xba\xaa\x6d\x35\xad\x6d\x15\x5c\x48\xa4\x84\x1c\xf3\x55\x18\x64\x0e\x3b\xca\x28\x1b\x9e\xda\x48\x8a\x54\x28\x85\xc6\x97\x6f\x0e\xb5\xad\xfc\xaa\xae\x52\xd6\x34\xa8\xf8\x9b\x8d\x90\x7c\x2a\xc5\xac\x5f\x0e\x9f\x06\x0f\xba\x81\x1c\x86\xf7\x77\x7e\x54\x43\x02\xb7\x77\xe7\xd0\x42\x6f\x4f\x1b\xe6\x36\x01\x5b\x68\x12\x6b\x88\xb2\x78\x41\x31\xf9\x6c\x90\xc0\xfd\x61\x9b\x2e\x05\xd3\xd9\xf0\x5e\xb4\xc6\xa0\x72\x0f\xa2\x46\xc8\xc3\x89\xd2\x5d\x1f\x0a\xc9\xac\xfd\x20\xac\x4b\x19\xf7\x75\xe0\xef\x0b\x21\xba\x52\x1b\x98\x52\xb2\x84\x57\x02\x01\x4b\x5f\xa7\x69\x41\x61\x19\x54\xa9\x44\x55\xb9\xcd\x3d\x88\x9b\x9b\x80\xce\xe7\x56\x38\xac\x29\xbe\x63\xd1\xbf\x8b\x7f\x90\xc9\x48\x94\x30\xa5\xfd\xc0\xdb\x03\x3e\x39\xc8\x73\x8f\x7e\x46\xdb\x91\xdf\x3b\x03\xd5\x9f\xb9\x01\x55\x84\xd2\x22\xc0\x99\xa0\xc1\x5a\x3f\xe2\xb9\xec\xd7\xc0\x66\x57\x32\x5a\xd5\x68\x2d\xab\x88\x03\x7c\x74\x90\xaf\x02\xa3\xcc\x50\xe6\x20\x07\x5f\x4e\x0d\x7d\xb0\x4e\xf1\xd1\xa5\xbe\xe6\xc8\x8c\x33\xe1\x9b\x2c\xb2\x3b\xe1\x8a\x0d\x50\xa5\xa4\x54\x5f\x5d\xd0\x05\xb3\x08\xa1\x45\x33\x1f\xc5\x6e\x23\x24\x4e\x3d\x01\xa5\x30\xd6\xf9\x3a\x08\x01\x46\x72\x80\xdb\x97\xc7\xa9\x98\x0f\x32\x22\x17\x04\x20\xad\x59\xe3\x7b\xa0\x87\x1b\x7d\x43\x7d\x7a\x77\x27\xb5\x78\xa6\x41\x09\xf8\x45\x73\xf4\x1e\x66\x47\x3a\x5a\x15\x52\x14\x5b\xc8\xe1\x9f\xe4\xd8\x77\x5b\x47\x6e\x3c\xf7\xbd\x35\x08\x53\x9e\x2e\xcb\x9d\x3a\x2d\xfc\xf6\xf7\x8c\xfb\x81\xa8\x86\xb5\x16\x3b\xa6\xa8\x1e\x28\xd4\xd2\xe8\x1a\x5e\xe4\x34\x17\x66\x87\x30\x43\x5b\xc6\x7f\x21\x79\x0e\xc3\xc8\xa4\x7f\xa1\xb0\xbd\xa9\x69\xef\x6f\xdc\x9b\x64\xfb\x6f\x70\xf6\x46\x2b\x27\x54\x8b\x1c\x48\x91\x6e\x11\xe7\x2e\x25\xdb\x9f\x7a\xbc\x68\xa5\xbe\x18\x4f\xba\x29\x8a\xce\x27\xdd\x08\x58\x2f\xd2\xa1\x1d\x89\xb0\xb7\x40\xa7\xd6\xb8\x01\x27\xea\x73\x6a\x87\xd1\x39\x84\xd9\xaf\xc3\x12\x2e\x27\xc4\x9f\x82\x68\x04\x00\xf1\x4f\x6d\xdd\x20\xf7\xb7\xa9\x1d\x33\xdc\xc6\x90\x5d\xee\x96\xda\x84\xcd\x53\xa6\x4e\xa7\x4e\xef\xf2\xb9\x5c\xb5\x82\xc7\x59\x77\x36\x1c\xe4\xc3\x3d\x75\x10\xea\xaa\x30\xeb\x67\xe3\x21\xc6\x4e\xf2\xc8\x5e\x6d\xab\x38\x83\xb3\x98\x47\xe4\x1a\x6d\xbd\x3d\x2a\x72\x7a\x9e\x5f\xb2\x72\xa2\x45\xe8\xbf\x42\xc1\xfc\x30\x38\x4c\x01\xff\x47\x13\x4c\xa5\xae\xa6\x38\x3a\x7e\x74\x83\xea\xb4\xa3\x3e\x69\xa1\x3c\x6b\x07\x19\x34\x46\xd3\xc1\x7e\x64\xed\x7e\x12\xed\x84\xe2\x7a\xe7\xbb\x52\x5b\xec\x6d\xf4\x35\xbb\xc4\x7a\x55\x68\xa5\x30\x9c\x19\x6c\xad\x8d\x43\xfe\x62\xb9\xc0\x7a\xe5\xad\x87\x68\xb4\xa2\xda\x3d\x05\xe0\xbb\x63\x34\xdc\x41\x6b\xc7\x84\xa3\x6f\xd6\x1c\xfa\x15\xeb\x98\x94\xc8\x8f\x57\x10\xb7\x27\x0b\xbe\x6e\x21\x9f\x44\xc7\xce\x7c\xe3\xff\x8e\xb7\x82\x8d\xc0\x34\xc8\xf8\xde\x87\xd2\x35\xdb\xd9\x7c\x0a\x8d\xf1\xdb\x6f\x9d\x78\x68\xa3\x2b\x8e\x96\x8b\xfe\xee\xb6\x5c\x84\xbf\x64\xfe\x3f\x00\x00\xff\xff\xa5\xdd\x30\x6c\xd1\x14\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 5329, mode: os.FileMode(420), modTime: time.Unix(1554500326, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

